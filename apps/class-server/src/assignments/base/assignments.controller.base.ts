/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssignmentsService } from "../assignments.service";
import { AssignmentsCreateInput } from "./AssignmentsCreateInput";
import { Assignments } from "./Assignments";
import { AssignmentsFindManyArgs } from "./AssignmentsFindManyArgs";
import { AssignmentsWhereUniqueInput } from "./AssignmentsWhereUniqueInput";
import { AssignmentsUpdateInput } from "./AssignmentsUpdateInput";

export class AssignmentsControllerBase {
  constructor(protected readonly service: AssignmentsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Assignments })
  async createAssignments(
    @common.Body() data: AssignmentsCreateInput
  ): Promise<Assignments> {
    return await this.service.createAssignments({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Assignments] })
  @ApiNestedQuery(AssignmentsFindManyArgs)
  async assignmentsItems(
    @common.Req() request: Request
  ): Promise<Assignments[]> {
    const args = plainToClass(AssignmentsFindManyArgs, request.query);
    return this.service.assignmentsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Assignments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assignments(
    @common.Param() params: AssignmentsWhereUniqueInput
  ): Promise<Assignments | null> {
    const result = await this.service.assignments({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Assignments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssignments(
    @common.Param() params: AssignmentsWhereUniqueInput,
    @common.Body() data: AssignmentsUpdateInput
  ): Promise<Assignments | null> {
    try {
      return await this.service.updateAssignments({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Assignments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssignments(
    @common.Param() params: AssignmentsWhereUniqueInput
  ): Promise<Assignments | null> {
    try {
      return await this.service.deleteAssignments({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
