/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ClassStudentService } from "../classStudent.service";
import { ClassStudentCreateInput } from "./ClassStudentCreateInput";
import { ClassStudent } from "./ClassStudent";
import { ClassStudentFindManyArgs } from "./ClassStudentFindManyArgs";
import { ClassStudentWhereUniqueInput } from "./ClassStudentWhereUniqueInput";
import { ClassStudentUpdateInput } from "./ClassStudentUpdateInput";

export class ClassStudentControllerBase {
  constructor(protected readonly service: ClassStudentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClassStudent })
  async createClassStudent(
    @common.Body() data: ClassStudentCreateInput
  ): Promise<ClassStudent> {
    return await this.service.createClassStudent({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClassStudent] })
  @ApiNestedQuery(ClassStudentFindManyArgs)
  async classStudents(@common.Req() request: Request): Promise<ClassStudent[]> {
    const args = plainToClass(ClassStudentFindManyArgs, request.query);
    return this.service.classStudents({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClassStudent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async classStudent(
    @common.Param() params: ClassStudentWhereUniqueInput
  ): Promise<ClassStudent | null> {
    const result = await this.service.classStudent({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClassStudent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateClassStudent(
    @common.Param() params: ClassStudentWhereUniqueInput,
    @common.Body() data: ClassStudentUpdateInput
  ): Promise<ClassStudent | null> {
    try {
      return await this.service.updateClassStudent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClassStudent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClassStudent(
    @common.Param() params: ClassStudentWhereUniqueInput
  ): Promise<ClassStudent | null> {
    try {
      return await this.service.deleteClassStudent({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
