/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClassStudents } from "./ClassStudents";
import { ClassStudentsCountArgs } from "./ClassStudentsCountArgs";
import { ClassStudentsFindManyArgs } from "./ClassStudentsFindManyArgs";
import { ClassStudentsFindUniqueArgs } from "./ClassStudentsFindUniqueArgs";
import { DeleteClassStudentsArgs } from "./DeleteClassStudentsArgs";
import { CreateClassStudentsDto } from "../CreateClassStudentsDto";
import { ClassStudentsService } from "../classStudents.service";
@graphql.Resolver(() => ClassStudents)
export class ClassStudentsResolverBase {
  constructor(protected readonly service: ClassStudentsService) {}

  async _classStudentsItemsMeta(
    @graphql.Args() args: ClassStudentsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClassStudents])
  async classStudentsItems(
    @graphql.Args() args: ClassStudentsFindManyArgs
  ): Promise<ClassStudents[]> {
    return this.service.classStudentsItems(args);
  }

  @graphql.Query(() => ClassStudents, { nullable: true })
  async classStudents(
    @graphql.Args() args: ClassStudentsFindUniqueArgs
  ): Promise<ClassStudents | null> {
    const result = await this.service.classStudents(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClassStudents)
  async deleteClassStudents(
    @graphql.Args() args: DeleteClassStudentsArgs
  ): Promise<ClassStudents | null> {
    try {
      return await this.service.deleteClassStudents(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreateClassStudentsDto)
  async CreateClassStudent(
    @graphql.Args()
    args: CreateClassStudentsDto
  ): Promise<CreateClassStudentsDto> {
    return this.service.CreateClassStudent(args);
  }

  @graphql.Query(() => [CreateClassStudentsDto])
  async GetClassStudents(
    @graphql.Args()
    args: string
  ): Promise<CreateClassStudentsDto[]> {
    return this.service.GetClassStudents(args);
  }
}
