/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SubmissionsService } from "../submissions.service";
import { SubmissionsCreateInput } from "./SubmissionsCreateInput";
import { Submissions } from "./Submissions";
import { SubmissionsFindManyArgs } from "./SubmissionsFindManyArgs";
import { SubmissionsWhereUniqueInput } from "./SubmissionsWhereUniqueInput";
import { SubmissionsUpdateInput } from "./SubmissionsUpdateInput";

export class SubmissionsControllerBase {
  constructor(protected readonly service: SubmissionsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Submissions })
  async createSubmissions(
    @common.Body() data: SubmissionsCreateInput
  ): Promise<Submissions> {
    return await this.service.createSubmissions({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Submissions] })
  @ApiNestedQuery(SubmissionsFindManyArgs)
  async submissionsItems(
    @common.Req() request: Request
  ): Promise<Submissions[]> {
    const args = plainToClass(SubmissionsFindManyArgs, request.query);
    return this.service.submissionsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Submissions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async submissions(
    @common.Param() params: SubmissionsWhereUniqueInput
  ): Promise<Submissions | null> {
    const result = await this.service.submissions({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Submissions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSubmissions(
    @common.Param() params: SubmissionsWhereUniqueInput,
    @common.Body() data: SubmissionsUpdateInput
  ): Promise<Submissions | null> {
    try {
      return await this.service.updateSubmissions({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Submissions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSubmissions(
    @common.Param() params: SubmissionsWhereUniqueInput
  ): Promise<Submissions | null> {
    try {
      return await this.service.deleteSubmissions({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
