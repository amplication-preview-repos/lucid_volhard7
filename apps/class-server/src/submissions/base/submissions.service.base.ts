/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Submissions as PrismaSubmissions } from "@prisma/client";

export class SubmissionsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SubmissionsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.submissions.count(args);
  }

  async submissionsItems(
    args: Prisma.SubmissionsFindManyArgs
  ): Promise<PrismaSubmissions[]> {
    return this.prisma.submissions.findMany(args);
  }
  async submissions(
    args: Prisma.SubmissionsFindUniqueArgs
  ): Promise<PrismaSubmissions | null> {
    return this.prisma.submissions.findUnique(args);
  }
  async createSubmissions(
    args: Prisma.SubmissionsCreateArgs
  ): Promise<PrismaSubmissions> {
    return this.prisma.submissions.create(args);
  }
  async updateSubmissions(
    args: Prisma.SubmissionsUpdateArgs
  ): Promise<PrismaSubmissions> {
    return this.prisma.submissions.update(args);
  }
  async deleteSubmissions(
    args: Prisma.SubmissionsDeleteArgs
  ): Promise<PrismaSubmissions> {
    return this.prisma.submissions.delete(args);
  }
}
